# -*- coding: utf-8 -*-
"""Website Scraper.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VVotG2Vxr3nmuOzXXH-c6oYklVwAkfjt
"""

import requests
from urllib.request import Request, urlopen
from bs4 import BeautifulSoup
from collections import defaultdict
import urllib.request
import shutil
import os
import datetime
import pandas as pd

# images = 
path_csv = 'drive/MyDrive/Scraper/Detailed csv'
path_image = 'drive/MyDrive/images'
img_dict = defaultdict(list)

headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36'}

def parse_webpage(url):
  html = requests.get(url, headers=headers)
  html.encoding = 'utf-8'
  soup = BeautifulSoup(html.content, "html.parser")

  image_elements = soup.find_all("div", class_="uagb-post__image")
  location_elements = soup.find_all("h4", class_ = "uagb-post__title uagb-post__text")

  for i in range(len(image_elements)):
    element = image_elements[i]
    link = element.find("a")["href"].split('/')
    timestamp = datetime.datetime(int(link[3]), int(link[4]), int(link[5]))
    location = location_elements[i].text.strip('\n')
    image_url = element.find("img", class_ = "attachment-large size-large")['src']
    img_dict['url'].append(image_url)
    img_dict['timestamp'].append(timestamp)
    img_dict['location'].append(location)
    filename = 'myduty' + '_' +  timestamp.strftime('%Y%m%d') + '_' + location + '_' +'_img.jpeg'
    img_dict['filename'].append(filename)
    req = Request(
        url=image_url,
        headers=headers
      )
    try:
      image = urlopen(req)
      shutil.copyfileobj(image, open(os.path.join(path_image, filename), 'wb'))
    except:
      print('url not valid')

for j in range(8):
  print('On page {}'.format(j))
  if j == 0:
    url = "https://myduty.net/posterops"
    parse_webpage(url)
  else:
    j += 1
    url = "https://myduty.net/posterops/page/{}/".format(j)
    parse_webpage(url)


img_dict

pd.DataFrame.from_dict(img_dict).to_csv(os.path.join(path_csv, 'my_duty' + '.csv'))

