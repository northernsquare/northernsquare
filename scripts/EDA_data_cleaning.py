# -*- coding: utf-8 -*-
"""data cleaning and EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B954Yw4U0vZkDrp7cOeTZ3c5RlZKUGIs
"""

!pip install pyairtable
!pip install geopy
!pip install https://github.com/ydataai/pandas-profiling/archive/master.zip
!pip install googlemaps

import pandas as pd
import requests
from urllib.request import Request, urlopen
import os
import pyairtable
from pyairtable import Table
from geopy.geocoders import Nominatim
from pandas_profiling import ProfileReport
import json
import shutil
from PIL import Image
import random
from io import BytesIO
import pillow_heif

headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36'}

base_id = 'appmJ91GbrAlwXda3'
api_key = 'key6MsikXMFtX1hCW'
table_name = 'details'

dict_raw = Table(api_key, base_id, table_name).all()

columns = ['gender', 'address', 'image_url', 
           'language', 'format', 'vandalized',
           'Sitong Bridge', 'Xi Jinping', 'Raise Awareness', 'Ugyhur or Hong Kong',
           "Women's rights or Queer Rights", 'Iran or Ukraine', 'University',
           'Special Location', 'Event', 'timestamp', 'filename']

path_raw_image = '/content/drive/MyDrive/'
path_output_image = '/content/drive/MyDrive/Output'
random.seed(10)
df = pd.DataFrame(columns = columns)
for row in dict_raw:

  # load data

  if  'Cleaned' in row['fields'].keys():
    if row['fields']['Cleaned']:
      if 'gender' in row['fields'].keys():
        gender = row['fields']['gender']
      else:
        gender = None

      if 'university' in row['fields'].keys():
        university = row['fields']['university']
      else:
        university = None

      if 'Location Interesting' in row['fields'].keys():
        special_location = row['fields']['Location Interesting']
      else:
        special_location = None

      if 'Event' in row['fields'].keys():
        event = row['fields']['Event']
      else:
        event = None

      if 'Address' in row['fields'].keys():
        Address = row['fields']['Address']
      else:
        Address = None

    folder = row['fields']['Sync Source (from imageurl)'][0]
    filename = row['fields']['File Path (from imageurl)'][0]
    filetype = row['fields']['File Type (from imageurl)'][0]

    if folder == 'images':
      image = Image.open(os.path.join(path_raw_image, folder, filename))

    else:
      folder = 'Survey/Response'
      try:
        image = Image.open(os.path.join(path_raw_image, folder, filename))
      except:
        heif_file = pillow_heif.read_heif(os.path.join(path_raw_image, folder, filename))
        image = Image.frombytes(
            heif_file.mode,
            heif_file.size,
            heif_file.data,
            "raw",
        )
        
    data = list(image.getdata())
    image_without_exif = Image.new(image.mode, image.size).convert('RGB')
    image_without_exif.putdata(data)

    filename_new =  row['fields']['timestamp'].replace("-","_") + '_' + str(random.randint(100000,999999)) +'.jpg' 

    image_without_exif.save(os.path.join(path_output_image, filename_new))

    new_row = {'filename': filename_new, 
               'gender': gender, 
               'address': Address,
               'timestamp': row['fields']['timestamp'],
               'format': row['fields']['Format (from imageurl)'], 
               'Sitong Bridge': row['fields']['四通桥Message (from imageurl)'][0], 
               'vandalized': row['fields']['撕海报 (from imageurl)'][0], 
               'language': row['fields']['language (from imageurl)'], 
               'Xi Jinping': row['fields']['Xi Jinping (from imageurl)'][0], 
               'Raise Awareness': row['fields']['Raise Awareness (from imageurl)'][0], 
               'Ugyhur or Hong Kong': row['fields']['Ugyhur or Hong Kong (from imageurl)'][0], 
               'Iran or Ukraine': row['fields']['Iran or Ukraine (from imageurl)'][0], 
               'University': university, 
               'Special Location': special_location, 
               'Event': event, 
               "Women's rights or Queer Rights": row['fields']["Women's Rights / Queer Rights (from imageurl)"][0], 
               }
    df = df.append(new_row, ignore_index=True)

df_format = df['format'].str.join(',').str.get_dummies(sep=',').astype(bool)
df_language = df['language'].str.join(',').str.get_dummies(sep=',').astype(bool)

df = pd.concat([df, df_format, df_language], axis = 1).drop(' ', axis = 1)

geocoder = Nominatim(user_agent="northensquare", timeout=10000)

df['latitude'] = df['address'].apply(lambda x: geocoder.geocode(x).latitude if geocoder.geocode(x) is not None else None)
df['longitude'] = df['address'].apply(lambda x: geocoder.geocode(x).longitude  if geocoder.geocode(x) is not None else None)

df['country'] = df['address'].apply(lambda x: geocoder.geocode(x)[0].split(',')[-1]  if geocoder.geocode(x) is not None else None)

df.to_csv(r'/content/drive/MyDrive/Output/data_cleaned.csv')